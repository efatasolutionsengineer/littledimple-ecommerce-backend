{
  "openapi": "3.0.0",
  "info": {
    "title": "E-Commerce API",
    "version": "1.0.0",
    "description": "API documentation for the E-Commerce platform"
  },
  "servers": [
    {
      "url": "http://localhost:3300"
    }
  ],
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      }
    },
    "schemas": {
      "BlogRequestTopicInput": {
        "type": "object",
        "required": [
          "name",
          "email",
          "message"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Requester's name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Requester's email address",
            "example": "john.doe@example.com"
          },
          "message": {
            "type": "string",
            "description": "Topic request message",
            "example": "I would like to see a blog post about baby sleep patterns."
          }
        }
      },
      "BlogRequestTopic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted ID",
            "example": "encrypted_id_string"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "message": {
            "type": "string",
            "example": "I would like to see a blog post about baby sleep patterns."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T10:00:00Z"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted category ID"
          },
          "name": {
            "type": "string",
            "description": "Category name"
          },
          "description": {
            "type": "string",
            "description": "Category description"
          },
          "media_id": {
            "type": "string",
            "description": "Encrypted gallery ID for category image"
          },
          "gallery_info": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "Gallery image URL"
              }
            }
          }
        }
      },
      "CategoryInput": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name"
          },
          "description": {
            "type": "string",
            "description": "Category description"
          },
          "media_id": {
            "type": "string",
            "description": "Encrypted gallery ID for category image"
          }
        }
      },
      "Coupon_Tables": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted coupon ID"
          },
          "code": {
            "type": "string"
          },
          "is_auto_generated": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "general",
              "shipping",
              "regional"
            ]
          },
          "discount_type": {
            "type": "string",
            "enum": [
              "percentage",
              "amount"
            ]
          },
          "discount_percentage": {
            "type": "integer"
          },
          "discount_amount": {
            "type": "number"
          },
          "min_purchase": {
            "type": "number"
          },
          "user_id": {
            "type": "string",
            "description": "Encrypted user ID"
          },
          "usage_limit": {
            "type": "integer"
          },
          "usage_count": {
            "type": "integer"
          },
          "valid_from": {
            "type": "string",
            "format": "date"
          },
          "valid_until": {
            "type": "string",
            "format": "date"
          },
          "status_publish": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "description": {
            "type": "string"
          },
          "coverage_areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coverage_Area"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "encrypted_id_string",
          "code": "DISCOUNT20",
          "is_auto_generated": false,
          "type": "general",
          "discount_type": "percentage",
          "discount_percentage": 20,
          "min_purchase": 100000,
          "usage_limit": 100,
          "usage_count": 0,
          "valid_from": "2024-01-01",
          "valid_until": "2024-12-31",
          "status_publish": "active",
          "status": "active",
          "description": "Discount 20% for all products",
          "created_at": "2023-01-01T00:00:00Z",
          "updated_at": "2023-01-01T00:00:00Z"
        }
      },
      "Coverage_Area": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted coverage area ID"
          },
          "coupon_id": {
            "type": "string",
            "description": "Encrypted coupon ID"
          },
          "province_id": {
            "type": "integer"
          },
          "city_id": {
            "type": "integer"
          },
          "subdistrict_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "encrypted_id_string",
          "coupon_id": "encrypted_coupon_id",
          "province_id": 1,
          "city_id": 2,
          "subdistrict_id": null,
          "created_at": "2023-01-01T00:00:00Z"
        }
      },
      "Coupon_Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "properties": {
              "coupons": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Coupon_Tables"
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "current_page": {
                    "type": "integer"
                  },
                  "per_page": {
                    "type": "integer"
                  },
                  "total": {
                    "type": "integer"
                  },
                  "total_pages": {
                    "type": "integer"
                  },
                  "has_next": {
                    "type": "boolean"
                  },
                  "has_prev": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "DimpleSquad": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "introduction_title": {
            "type": "string"
          },
          "introduction_description": {
            "type": "string"
          },
          "introduction_media_link": {
            "type": "string"
          },
          "benefit_title": {
            "type": "string"
          },
          "benefit_object": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "icon": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          },
          "howtojoin_title": {
            "type": "string"
          },
          "howtojoin_description": {
            "type": "string"
          },
          "howtojoin_button_link": {
            "type": "string"
          },
          "howtojoin_button_title": {
            "type": "string"
          },
          "activities_gallery": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "media_link": {
                  "type": "string"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Media_Gallery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "video"
            ]
          },
          "tag": {
            "type": "string"
          },
          "is_private": {
            "type": "boolean",
            "description": "Whether this media requires authentication to access"
          },
          "image_small": {
            "type": "string"
          },
          "image_medium": {
            "type": "string"
          },
          "image_high": {
            "type": "string"
          },
          "image_original": {
            "type": "string"
          },
          "video_link": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MidtransTransaction": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "Encrypted order ID"
          },
          "gross_amount": {
            "type": "number",
            "description": "Total amount"
          },
          "customer_details": {
            "type": "object",
            "properties": {
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              }
            }
          },
          "item_details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "number"
                },
                "quantity": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "MediaGallery": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "video"
            ]
          },
          "image_small": {
            "type": "string",
            "description": "URL to small version of the image"
          },
          "image_medium": {
            "type": "string",
            "description": "URL to medium version of the image"
          },
          "image_high": {
            "type": "string",
            "description": "URL to high resolution version of the image"
          },
          "image_original": {
            "type": "string",
            "description": "URL to original image"
          },
          "video_link": {
            "type": "string",
            "description": "URL to video (if type is video)"
          }
        }
      },
      "ProductImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted product image ID"
          },
          "product_id": {
            "type": "string",
            "description": "Encrypted product ID"
          },
          "media_id": {
            "type": "string",
            "description": "Media ID"
          },
          "category": {
            "type": "string",
            "description": "Image category (e.g., main, thumbnail)",
            "example": "main"
          },
          "is_main": {
            "type": "boolean",
            "description": "Whether this is the main product image"
          },
          "media": {
            "$ref": "#/components/schemas/MediaGallery"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted product ID"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "stock": {
            "type": "integer"
          },
          "category_id": {
            "type": "string",
            "description": "Encrypted category ID"
          },
          "category_name": {
            "type": "string"
          },
          "image_url": {
            "type": "string",
            "description": "Legacy image URL (may be deprecated)"
          },
          "images": {
            "type": "array",
            "description": "Product images from product_images table",
            "items": {
              "$ref": "#/components/schemas/ProductImage"
            }
          },
          "main_image": {
            "$ref": "#/components/schemas/MediaGallery",
            "description": "The main product image"
          },
          "discount_percentage": {
            "type": "number"
          },
          "discount_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductInput": {
        "type": "object",
        "required": [
          "name",
          "price",
          "stock",
          "category_id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "stock": {
            "type": "integer"
          },
          "category_id": {
            "type": "string",
            "description": "Encrypted category ID"
          },
          "image_url": {
            "type": "string"
          },
          "discount_percentage": {
            "type": "number"
          },
          "discount_duration_days": {
            "type": "integer"
          }
        }
      },
      "ProductStore": {
        "type": "object",
        "properties": {
          "encrypted_id": {
            "type": "string",
            "example": "encrypted123"
          },
          "area": {
            "type": "string"
          },
          "kode_toko": {
            "type": "string"
          },
          "alamat": {
            "type": "string"
          },
          "nomor_hp": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "link_map": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Province": {
        "type": "object",
        "properties": {
          "province_id": {
            "type": "string"
          },
          "province": {
            "type": "string"
          }
        }
      },
      "City": {
        "type": "object",
        "properties": {
          "city_id": {
            "type": "string"
          },
          "province_id": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "city_name": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          }
        }
      },
      "CostRequest": {
        "type": "object",
        "required": [
          "origin",
          "destination",
          "weight"
        ],
        "properties": {
          "origin": {
            "type": "string",
            "example": "501"
          },
          "destination": {
            "type": "string",
            "example": "114"
          },
          "weight": {
            "type": "integer",
            "example": 1700
          },
          "courier": {
            "type": "string",
            "example": "jne"
          }
        }
      },
      "WaybillRequest": {
        "type": "object",
        "required": [
          "waybill"
        ],
        "properties": {
          "waybill": {
            "type": "string",
            "example": "8389890055"
          }
        }
      },
      "GeneralSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "link_instagram": {
            "type": "string"
          },
          "link_whatsapp": {
            "type": "string"
          },
          "link_tokopedia": {
            "type": "string"
          },
          "link_shopee": {
            "type": "string"
          },
          "alamat": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "favicon": {
            "type": "string"
          },
          "no_telepon": {
            "type": "string"
          },
          "about_media_link": {
            "type": "string"
          },
          "about_title": {
            "type": "string"
          },
          "about_description": {
            "type": "string"
          },
          "about_button_link": {
            "type": "string"
          },
          "about_button_title": {
            "type": "string"
          },
          "cta_title": {
            "type": "string"
          },
          "cta_button_link": {
            "type": "string"
          },
          "cta_button_title": {
            "type": "string"
          },
          "service_fee_mode": {
            "type": "string"
          },
          "service_fee_split_percentage_toko": {
            "type": "integer"
          },
          "service_fee_split_percentage_buyer": {
            "type": "integer"
          },
          "waktu_operasi_toko": {
            "type": "string"
          },
          "map_lokasi": {
            "type": "string"
          },
          "main_toko_alamat": {
            "type": "string"
          },
          "main_toko_provinsi": {
            "type": "string"
          },
          "main_toko_kabupaten": {
            "type": "string"
          },
          "main_toko_kecamatan": {
            "type": "string"
          },
          "main_toko_kelurahan": {
            "type": "string"
          },
          "main_toko_kodepos": {
            "type": "string"
          },
          "reviews_selected": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Carousel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted carousel ID"
          },
          "title": {
            "type": "string"
          },
          "title_sub": {
            "type": "string"
          },
          "button_1_title": {
            "type": "string"
          },
          "button_1_link": {
            "type": "string"
          },
          "button_2_title": {
            "type": "string"
          },
          "button_2_link": {
            "type": "string"
          },
          "images": {
            "type": "string"
          },
          "sort_order": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AvailablePayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted payment ID"
          },
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "sort_order": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OurService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted service ID"
          },
          "icon": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "modals": {
            "type": "object"
          },
          "sort_order": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ContactUs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted contact ID"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Warranty_Tables": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encrypted warranty ID"
          },
          "produk_id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "kode_warranty": {
            "type": "string"
          },
          "nama": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "nomor_hp": {
            "type": "string"
          },
          "alamat": {
            "type": "string"
          },
          "attachments_receipt": {
            "type": "string"
          },
          "attachments_barcode": {
            "type": "string"
          },
          "attachments_product": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "submitted",
              "under_review",
              "approved",
              "rejected",
              "completed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "encrypted_id_string",
          "produk_id": 1,
          "order_id": 123,
          "kode_warranty": "WR-2023-001",
          "nama": "John Doe",
          "email": "john@example.com",
          "nomor_hp": "+628123456789",
          "alamat": "Jl. Example No. 123",
          "status": "submitted",
          "created_at": "2023-01-01T00:00:00Z",
          "updated_at": "2023-01-01T00:00:00Z"
        }
      },
      "Warranty_Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "properties": {
              "warranties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Warranty_Tables"
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "current_page": {
                    "type": "integer"
                  },
                  "per_page": {
                    "type": "integer"
                  },
                  "total": {
                    "type": "integer"
                  },
                  "total_pages": {
                    "type": "integer"
                  },
                  "has_next": {
                    "type": "boolean"
                  },
                  "has_prev": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "Wishlist_Tables": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "product_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "date-time",
            "format": "date-time"
          }
        }
      },
      "Wishlist_Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully Created Data"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wishlist_Tables"
            },
            "example": [
              {
                "id": 1,
                "user_id": 123,
                "product_id": "abc123",
                "created_at": "2023-01-01T00:00:00Z",
                "deleted_at": null
              }
            ]
          }
        }
      }
    },
    "responses": {
      "ProductStoreList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProductStore"
        }
      }
    }
  },
  "security": [
    {
      "cookieAuth": []
    }
  ],
  "paths": {
    "/api/blog-posts": {
      "get": {
        "summary": "Get all blog posts with pagination, sorting, and search",
        "tags": [
          "BlogPosts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "created_at",
                "updated_at",
                "author_id",
                "category_id"
              ],
              "default": "created_at"
            },
            "description": "Sort by field",
            "example": "title"
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order",
            "example": "desc"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search across title, content, and slug",
            "example": "technology"
          },
          {
            "in": "query",
            "name": "category_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by category ID",
            "example": 1
          },
          {
            "in": "query",
            "name": "author_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by author ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Blog posts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Blog posts retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "blog_posts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Encrypted blog post ID",
                                "example": "encrypted_blog_id"
                              },
                              "title": {
                                "type": "string",
                                "example": "How to Build a REST API"
                              },
                              "slug": {
                                "type": "string",
                                "example": "how-to-build-rest-api"
                              },
                              "content": {
                                "type": "string",
                                "example": "In this comprehensive guide, we will explore..."
                              },
                              "image_main_url": {
                                "type": "string",
                                "nullable": true,
                                "example": "https://example.com/images/main.jpg"
                              },
                              "image_thumbnail_url": {
                                "type": "string",
                                "nullable": true,
                                "example": "https://example.com/images/thumb.jpg"
                              },
                              "image_banner_url": {
                                "type": "string",
                                "nullable": true,
                                "example": "https://example.com/images/banner.jpg"
                              },
                              "image_meta_url": {
                                "type": "string",
                                "nullable": true,
                                "example": "https://example.com/images/meta.jpg"
                              },
                              "category_id": {
                                "type": "string",
                                "nullable": true,
                                "description": "Encrypted category ID",
                                "example": "encrypted_category_id"
                              },
                              "author_id": {
                                "type": "string",
                                "nullable": true,
                                "description": "Encrypted author ID",
                                "example": "encrypted_author_id"
                              },
                              "category_name": {
                                "type": "string",
                                "nullable": true,
                                "example": "Technology"
                              },
                              "author_name": {
                                "type": "string",
                                "nullable": true,
                                "example": "John Doe"
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-11-15T10:30:00Z"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-11-15T10:30:00Z"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer",
                              "example": 1
                            },
                            "per_page": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 50
                            },
                            "total_pages": {
                              "type": "integer",
                              "example": 5
                            },
                            "has_next": {
                              "type": "boolean",
                              "example": true
                            },
                            "has_prev": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "filters": {
                          "type": "object",
                          "properties": {
                            "sort_by": {
                              "type": "string",
                              "example": "created_at"
                            },
                            "sort_order": {
                              "type": "string",
                              "example": "desc"
                            },
                            "search": {
                              "type": "string",
                              "nullable": true,
                              "example": "technology"
                            },
                            "category_id": {
                              "type": "integer",
                              "nullable": true,
                              "example": 1
                            },
                            "author_id": {
                              "type": "integer",
                              "nullable": true,
                              "example": 1
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid sort_by field or sort_order"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Menambahkan artikel blog baru dengan validasi slug unik",
        "tags": [
          "Blog Posts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Cara Membuat Aplikasi React"
                  },
                  "content": {
                    "type": "string",
                    "example": "Ini adalah contoh artikel yang membahas cara membuat aplikasi menggunakan React."
                  },
                  "category_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "author_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "image_main_url": {
                    "type": "string"
                  },
                  "image_thumbnail_url": {
                    "type": "string"
                  },
                  "image_banner_url": {
                    "type": "string"
                  },
                  "image_meta_url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Artikel berhasil ditambahkan"
          },
          "400": {
            "description": "Slug sudah digunakan"
          }
        }
      }
    },
    "/api/blog-posts/lists": {
      "get": {
        "summary": "Get all blog posts with optional filtering and pagination",
        "tags": [
          "Blog Posts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of blog posts per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            },
            "description": "Search keyword in title or content"
          }
        ],
        "responses": {
          "200": {
            "description": "List of blog posts"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/blog-posts/{id}": {
      "put": {
        "summary": "Memperbarui artikel blog dengan validasi slug unik",
        "tags": [
          "Blog Posts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Cara Membuat Aplikasi React"
                  },
                  "content": {
                    "type": "string",
                    "example": "Ini adalah contoh artikel yang membahas cara membuat aplikasi menggunakan React."
                  },
                  "category_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "author_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "image_main_url": {
                    "type": "string"
                  },
                  "image_thumbnail_url": {
                    "type": "string"
                  },
                  "image_banner_url": {
                    "type": "string"
                  },
                  "image_meta_url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Artikel berhasil diperbarui"
          },
          "400": {
            "description": "Slug sudah digunakan"
          }
        }
      },
      "delete": {
        "summary": "Hapus blog post (soft delete)",
        "tags": [
          "BlogPosts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post berhasil dihapus"
          }
        }
      }
    },
    "/api/blog-posts/stats/category": {
      "get": {
        "summary": "Statistik jumlah artikel per kategori",
        "tags": [
          "Blog Posts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistik berhasil diambil"
          }
        }
      }
    },
    "/api/blog-posts/stats/author": {
      "get": {
        "summary": "Statistik jumlah artikel per author",
        "tags": [
          "Blog Posts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistik berhasil diambil"
          }
        }
      }
    },
    "/api/blog-posts/statistics/category": {
      "get": {
        "summary": "Menampilkan statistik jumlah artikel per kategori",
        "tags": [
          "Blog Posts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistik jumlah artikel per kategori",
            "content": {
              "application/json": null,
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "category_id": {
                      "type": "integer"
                    },
                    "category_name": {
                      "type": "string"
                    },
                    "article_count": {
                      "type": "integer"
                    }
                  },
                  "example": {
                    "category_id": 1,
                    "category_name": "Teknologi",
                    "article_count": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/blog-posts/statistics/author": {
      "get": {
        "summary": "Menampilkan statistik jumlah artikel per author",
        "tags": [
          "Blog Posts"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistik jumlah artikel per author",
            "content": {
              "application/json": null,
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "author_id": {
                      "type": "integer"
                    },
                    "author_name": {
                      "type": "string"
                    },
                    "article_count": {
                      "type": "integer"
                    }
                  },
                  "example": {
                    "author_id": 1,
                    "author_name": "John Doe",
                    "article_count": 5
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/blog-posts/status/{status}": {
      "get": {
        "summary": "Menampilkan artikel berdasarkan status publish",
        "tags": [
          "Blog Posts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "status",
            "required": true,
            "description": "Status publish artikel yang ingin difilter (draft, publish, deleted)",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "publish",
                "deleted"
              ]
            }
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Artikel dengan status publish tertentu",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPost"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status tidak valid"
          },
          "404": {
            "description": "Tidak ada artikel ditemukan dengan status tersebut"
          },
          "500": {
            "description": "Terjadi kesalahan saat mengambil artikel"
          }
        }
      }
    },
    "/api/blog-posts/request-topic": {
      "get": {
        "summary": "Get all blog topic requests with pagination and filtering (Admin only)",
        "tags": [
          "Admin",
          "Blog Requests"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "date_from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at from date (YYYY-MM-DD)",
            "example": "2023-01-01"
          },
          {
            "in": "query",
            "name": "date_to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at to date (YYYY-MM-DD)",
            "example": "2023-12-31"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search across name, email, and message",
            "example": "machine learning"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog topic requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Blog topic requests retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "requests": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BlogRequestTopic"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "total_pages": {
                              "type": "integer"
                            },
                            "has_next": {
                              "type": "boolean"
                            },
                            "has_prev": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Admin access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new blog topic request",
        "tags": [
          "Blog Requests"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogRequestTopicInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blog topic request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Blog topic request submitted successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/BlogRequestTopic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/blog-posts/request-topic/{id}": {
      "delete": {
        "summary": "Soft delete a blog topic request (Admin only)",
        "tags": [
          "Admin",
          "Blog Requests"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted request ID",
            "example": "encrypted_request_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog topic request deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Blog topic request deleted successfully"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request ID format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Admin access required"
          },
          "404": {
            "description": "Request not found or already deleted"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/blog-posts/count-by-category": {
      "get": {
        "summary": "Get blog posts count grouped by category (Simple version)",
        "tags": [
          "BlogPosts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of categories to return",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Blog posts count by category retrieved successfully"
          }
        }
      }
    },
    "/api/cart/me": {
      "get": {
        "summary": "Get all cart items for the authenticated user",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "List of cart items with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Cart items retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cart": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Cart"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "total_pages": {
                              "type": "integer"
                            },
                            "has_next": {
                              "type": "boolean"
                            },
                            "has_prev": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/cart": {
      "get": {
        "summary": "Get all cart items from all users (Admin only)",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by specific user ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of all cart items with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "properties": {
                        "cart": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Cart"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "total_pages": {
                              "type": "integer"
                            },
                            "has_next": {
                              "type": "boolean"
                            },
                            "has_prev": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Add a product to the cart",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "product_id": {
                    "type": "integer"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                },
                "required": [
                  "product_id",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cart item added"
          }
        }
      }
    },
    "/api/cart/{id}": {
      "delete": {
        "summary": "Soft delete a cart item",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Cart item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item soft deleted"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "summary": "Get all categories",
        "tags": [
          "Categories"
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "tags": [
          "Categories"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "summary": "Get category by ID",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update a category",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted category ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Soft delete a category",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/coupons": {
      "post": {
        "summary": "Create new coupon (Admin only)",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "type",
                  "discount_type",
                  "valid_from",
                  "valid_until"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "DISCOUNT20"
                  },
                  "is_auto_generated": {
                    "type": "boolean",
                    "default": false
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "general",
                      "shipping",
                      "regional"
                    ],
                    "example": "general"
                  },
                  "discount_type": {
                    "type": "string",
                    "enum": [
                      "percentage",
                      "amount"
                    ],
                    "example": "percentage"
                  },
                  "discount_percentage": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "example": 20
                  },
                  "discount_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 50000
                  },
                  "min_purchase": {
                    "type": "number",
                    "default": 0,
                    "example": 100000
                  },
                  "user_id": {
                    "type": "string",
                    "description": "Encrypted user ID for personal voucher"
                  },
                  "usage_limit": {
                    "type": "integer",
                    "example": 100
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-01-01"
                  },
                  "valid_until": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-12-31"
                  },
                  "status_publish": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "inactive"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active"
                  },
                  "description": {
                    "type": "string",
                    "example": "Discount 20% for all products"
                  },
                  "coverage_areas": {
                    "type": "array",
                    "description": "Required when type is 'regional'",
                    "items": {
                      "type": "object",
                      "properties": {
                        "province_id": {
                          "type": "integer"
                        },
                        "city_id": {
                          "type": "integer"
                        },
                        "subdistrict_id": {
                          "type": "integer"
                        }
                      }
                    },
                    "example": [
                      {
                        "province_id": 1,
                        "city_id": 2,
                        "subdistrict_id": null
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Coupon created successfully"
          },
          "400": {
            "description": "Bad request - validation errors"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "summary": "Get all coupons with pagination, filtering, sorting, and search (Admin only)",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order for created_at",
            "example": "desc"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by status",
            "example": "active"
          },
          {
            "in": "query",
            "name": "date_from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at from date (YYYY-MM-DD)",
            "example": "2023-01-01"
          },
          {
            "in": "query",
            "name": "date_to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at to date (YYYY-MM-DD)",
            "example": "2023-12-31"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search across all fields",
            "example": "DISCOUNT"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon_Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access require"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/coupons/{id}": {
      "get": {
        "summary": "Get coupon by ID (Admin only)",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted coupon ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Coupon not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update coupon (Admin only)",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted coupon ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "general",
                      "shipping",
                      "regional"
                    ]
                  },
                  "discount_type": {
                    "type": "string",
                    "enum": [
                      "percentage",
                      "amount"
                    ]
                  },
                  "discount_percentage": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100
                  },
                  "discount_amount": {
                    "type": "number",
                    "minimum": 0
                  },
                  "min_purchase": {
                    "type": "number"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "Encrypted user ID"
                  },
                  "usage_limit": {
                    "type": "integer"
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date"
                  },
                  "valid_until": {
                    "type": "string",
                    "format": "date"
                  },
                  "status_publish": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "coverage_areas": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "province_id": {
                          "type": "integer"
                        },
                        "city_id": {
                          "type": "integer"
                        },
                        "subdistrict_id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Coupon updated successfully"
          },
          "400": {
            "description": "Bad request - validation errors"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Coupon not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete coupon (soft delete) (Admin only)",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted coupon ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Coupon not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/coupons/code/{code}": {
      "get": {
        "summary": "Get coupon by code (Public access)",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Coupon code",
            "example": "DISCOUNT20"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Coupon retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Coupon_Tables"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Coupon not found or not active"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/coupons/publish": {
      "get": {
        "summary": "Get all published and active coupons (Public access)",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "general",
                "shipping",
                "regional"
              ]
            },
            "description": "Filter by coupon type",
            "example": "general"
          },
          {
            "in": "query",
            "name": "discount_type",
            "schema": {
              "type": "string",
              "enum": [
                "percentage",
                "amount"
              ]
            },
            "description": "Filter by discount type",
            "example": "percentage"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search in code and description",
            "example": "DISCOUNT"
          }
        ],
        "responses": {
          "200": {
            "description": "Published coupons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Published coupons retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "coupons": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Coupon_Tables"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "total_pages": {
                              "type": "integer"
                            },
                            "has_next": {
                              "type": "boolean"
                            },
                            "has_prev": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/coupons/me": {
      "get": {
        "summary": "Get user's personal coupons and general coupons",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "general",
                "shipping",
                "regional"
              ]
            },
            "description": "Filter by coupon type",
            "example": "general"
          },
          {
            "in": "query",
            "name": "discount_type",
            "schema": {
              "type": "string",
              "enum": [
                "percentage",
                "amount"
              ]
            },
            "description": "Filter by discount type",
            "example": "percentage"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search in code and description",
            "example": "DISCOUNT"
          },
          {
            "in": "query",
            "name": "show_expired",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include expired coupons",
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "User coupons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User coupons retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "coupons": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Coupon_Tables"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "is_personal": {
                                    "type": "boolean",
                                    "description": "Whether this is a personal coupon for the user"
                                  },
                                  "is_expired": {
                                    "type": "boolean",
                                    "description": "Whether the coupon is expired"
                                  },
                                  "is_used_up": {
                                    "type": "boolean",
                                    "description": "Whether the coupon has reached usage limit"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "total_pages": {
                              "type": "integer"
                            },
                            "has_next": {
                              "type": "boolean"
                            },
                            "has_prev": {
                              "type": "boolean"
                            }
                          }
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "total_coupons": {
                              "type": "integer"
                            },
                            "personal_coupons": {
                              "type": "integer"
                            },
                            "general_coupons": {
                              "type": "integer"
                            },
                            "active_coupons": {
                              "type": "integer"
                            },
                            "expired_coupons": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/coupons/apply": {
      "post": {
        "summary": "Apply/validate coupon code for user order",
        "tags": [
          "Coupons"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "order_amount"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Coupon code to apply",
                    "example": "DISCOUNT20"
                  },
                  "order_amount": {
                    "type": "number",
                    "description": "Total order amount before discount",
                    "example": 150000
                  },
                  "shipping_cost": {
                    "type": "number",
                    "description": "Shipping cost (required for shipping type coupons)",
                    "example": 25000
                  },
                  "destination": {
                    "type": "object",
                    "description": "Destination details (required for regional coupons)",
                    "properties": {
                      "province_id": {
                        "type": "integer",
                        "example": 1
                      },
                      "city_id": {
                        "type": "integer",
                        "example": 2
                      },
                      "subdistrict_id": {
                        "type": "integer",
                        "example": 3
                      }
                    }
                  },
                  "dry_run": {
                    "type": "boolean",
                    "description": "If true, only validate without incrementing usage count",
                    "default": true,
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Coupon applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Coupon applied successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "coupon": {
                          "$ref": "#/components/schemas/Coupon_Tables"
                        },
                        "discount_calculation": {
                          "type": "object",
                          "properties": {
                            "original_amount": {
                              "type": "number",
                              "example": 150000
                            },
                            "discount_amount": {
                              "type": "number",
                              "example": 30000
                            },
                            "final_amount": {
                              "type": "number",
                              "example": 120000
                            },
                            "discount_percentage": {
                              "type": "number",
                              "example": 20
                            },
                            "applicable_to": {
                              "type": "string",
                              "enum": [
                                "order",
                                "shipping"
                              ],
                              "example": "order"
                            },
                            "original_shipping": {
                              "type": "number",
                              "example": 25000
                            },
                            "final_shipping": {
                              "type": "number",
                              "example": 25000
                            }
                          }
                        },
                        "validation": {
                          "type": "object",
                          "properties": {
                            "is_valid": {
                              "type": "boolean",
                              "example": true
                            },
                            "is_personal": {
                              "type": "boolean",
                              "example": false
                            },
                            "is_regional": {
                              "type": "boolean",
                              "example": false
                            },
                            "remaining_usage": {
                              "type": "integer",
                              "example": 95
                            },
                            "expires_at": {
                              "type": "string",
                              "format": "date",
                              "example": "2024-12-31"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Coupon not found or not applicable"
          },
          "422": {
            "description": "Coupon validation failed"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/dimple-squad": {
      "post": {
        "summary": "Create a new Dimple Squad entry",
        "tags": [
          "Dimple Squad"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DimpleSquad"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully"
          }
        }
      },
      "get": {
        "summary": "Get all Dimple Squad entries",
        "tags": [
          "Dimple Squad"
        ],
        "responses": {
          "200": {
            "description": "List of entries"
          }
        }
      }
    },
    "/api/dimple-squad/{id}": {
      "get": {
        "summary": "Get a Dimple Squad entry by ID",
        "tags": [
          "Dimple Squad"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entry found"
          },
          "404": {
            "description": "Entry not found"
          }
        }
      },
      "put": {
        "summary": "Update a Dimple Squad entry",
        "tags": [
          "Dimple Squad"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DimpleSquad"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Entry updated"
          },
          "404": {
            "description": "Entry not found"
          }
        }
      }
    },
    "/api/gallery/upload": {
      "post": {
        "summary": "Upload images or videos to gallery",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "title": {
                    "type": "string"
                  },
                  "tag": {
                    "type": "string"
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Set to true for private media (requires authentication)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media uploaded successfully"
          }
        }
      }
    },
    "/api/gallery": {
      "get": {
        "summary": "Get public gallery items (no authentication required)",
        "tags": [
          "Gallery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "image",
                "video",
                "all"
              ]
            },
            "description": "Filter by media type"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Filter by tag"
          }
        ],
        "responses": {
          "200": {
            "description": "List of public gallery items"
          }
        }
      }
    },
    "/api/gallery/private": {
      "get": {
        "summary": "Get all gallery items including private ones (requires authentication)",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "image",
                "video",
                "all"
              ]
            },
            "description": "Filter by media type"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Filter by tag"
          },
          {
            "in": "query",
            "name": "is_private",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by private status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all gallery items including private ones"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          }
        }
      }
    },
    "/api/gallery/{id}": {
      "get": {
        "summary": "Get public gallery item by ID (no authentication required)",
        "tags": [
          "Gallery"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery item details"
          },
          "404": {
            "description": "Gallery item not found or requires authentication"
          }
        }
      },
      "put": {
        "summary": "Update gallery item",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "tag": {
                    "type": "string"
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Set to true for private media (requires authentication)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gallery item updated successfully"
          }
        }
      },
      "delete": {
        "summary": "Delete gallery item",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery item deleted successfully"
          }
        }
      }
    },
    "/api/gallery/private/{id}": {
      "get": {
        "summary": "Get gallery item by ID including private content (requires authentication)",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery item details including private content"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          },
          "404": {
            "description": "Gallery item not found"
          }
        }
      }
    },
    "/api/gallery/slug/{slug}": {
      "get": {
        "summary": "Get public gallery item by slug (no authentication required)",
        "tags": [
          "Gallery"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Public gallery item details"
          },
          "404": {
            "description": "Gallery item not found or requires authentication"
          }
        }
      }
    },
    "/api/gallery/private/slug/{slug}": {
      "get": {
        "summary": "Get gallery item by slug including private content (requires authentication)",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery item details including private content"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          },
          "404": {
            "description": "Gallery item not found"
          }
        }
      }
    },
    "/api/gallery/stream/{id}": {
      "get": {
        "summary": "Stream video from gallery (authentication required for private videos)",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery video ID"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to media proxy URL for video"
          },
          "401": {
            "description": "Unauthorized - authentication required for private videos"
          },
          "404": {
            "description": "Video not found"
          }
        }
      }
    },
    "/api/media/view": {
      "get": {
        "summary": "Media proxy to serve public images and videos securely",
        "tags": [
          "Gallery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Media path"
          },
          {
            "in": "query",
            "name": "expires",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Expiry timestamp"
          },
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security token"
          }
        ],
        "responses": {
          "200": {
            "description": "Media file"
          },
          "302": {
            "description": "Redirect to signed URL"
          }
        }
      }
    },
    "/api/media/private/view": {
      "get": {
        "summary": "Media proxy to serve private images and videos securely (requires authentication)",
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Media path"
          },
          {
            "in": "query",
            "name": "expires",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Expiry timestamp"
          },
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security token"
          }
        ],
        "responses": {
          "200": {
            "description": "Media file"
          },
          "302": {
            "description": "Redirect to signed URL"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          }
        }
      }
    },
    "/api/gallery/refresh/{id}": {
      "get": {
        "summary": "Refresh media URLs for a gallery item",
        "tags": [
          "Gallery"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Gallery item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Refreshed gallery item URLs"
          }
        }
      }
    },
    "/api/gallery/cache/stats": {
      "get": {
        "summary": "Get cache statistics (admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cache statistics"
          }
        }
      }
    },
    "/api/general-settings": {
      "get": {
        "summary": "Get general settings",
        "tags": [
          "GeneralSettings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "General settings data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "settings": {
                      "type": "object",
                      "description": "The settings data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update general settings",
        "tags": [
          "GeneralSettings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "link_instagram": "https://instagram.com/yourstore",
                  "link_whatsapp": "https://wa.me/628123456789",
                  "alamat": "Jl. Contoh No. 123",
                  "email": "store@example.com",
                  "service_fee_mode": "buyer",
                  "waktu_operasi_toko": "08:00 - 17:00"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings updated or created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ld/home": {
      "get": {
        "summary": "Get Little dimple",
        "tags": [
          "Little Dimple"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Little dimple data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "settings": {
                      "type": "object",
                      "description": "The settings data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ld/contact-us": {
      "post": {
        "summary": "Submit a contact us message",
        "tags": [
          "Little Dimple"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "subject",
                  "message"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact message submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ld/warranty": {
      "post": {
        "summary": "Check if warranty exists by code",
        "tags": [
          "Warranty"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kode_warranty": {
                    "type": "string"
                  }
                },
                "required": [
                  "kode_warranty"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Warranty found or not found"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ld/manual-warranty": {
      "post": {
        "summary": "Insert manual warranty data",
        "tags": [
          "Warranty"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "nohp": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "province": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "district": {
                    "type": "string"
                  },
                  "subdistrict": {
                    "type": "string"
                  },
                  "postalcode": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "attachment_receipt": {
                    "type": "string",
                    "format": "binary"
                  },
                  "attachment_barcode": {
                    "type": "string",
                    "format": "binary"
                  },
                  "attachment_product": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Manual warranty submitted successfully"
          }
        }
      }
    },
    "/api/ld/sessions": {
      "post": {
        "summary": "Create a new session with location data",
        "tags": [
          "Sessions"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ip",
                  "long",
                  "lat",
                  "alt"
                ],
                "properties": {
                  "ip": {
                    "type": "string",
                    "description": "IP address",
                    "example": "192.168.1.100"
                  },
                  "long": {
                    "type": "number",
                    "description": "Longitude",
                    "example": 106.8456
                  },
                  "lat": {
                    "type": "number",
                    "description": "Latitude",
                    "example": -6.2088
                  },
                  "alt": {
                    "type": "number",
                    "description": "Altitude",
                    "example": 100.5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Session created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "ip": {
                          "type": "string",
                          "example": "192.168.1.100"
                        },
                        "long": {
                          "type": "number",
                          "example": 106.8456
                        },
                        "lat": {
                          "type": "number",
                          "example": -6.2088
                        },
                        "alt": {
                          "type": "number",
                          "example": 100.5
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T12:00:00Z"
                        },
                        "user_id": {
                          "type": "integer",
                          "nullable": true,
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Missing required fields"
                    },
                    "error": {
                      "type": "string",
                      "example": "Missing required fields: ip, long, lat, alt"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/midtrans/create-transaction": {
      "post": {
        "summary": "Create Midtrans payment transaction",
        "tags": [
          "Midtrans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "order_id",
                  "gross_amount",
                  "customer_details",
                  "item_details"
                ],
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "Encrypted order ID",
                    "example": "08f9efede18cf28268e06bd86eedf249"
                  },
                  "gross_amount": {
                    "type": "number",
                    "description": "Total amount",
                    "example": 2400000
                  },
                  "customer_details": {
                    "type": "object",
                    "properties": {
                      "first_name": {
                        "type": "string",
                        "example": "Rano"
                      },
                      "last_name": {
                        "type": "string",
                        "example": "Muhamad"
                      },
                      "email": {
                        "type": "string",
                        "example": "ranomuhamad98@gmail.com"
                      },
                      "phone": {
                        "type": "string",
                        "example": "+6285716800875"
                      },
                      "billing_address": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "example": "Jl. Palapa Blok F12"
                          },
                          "city": {
                            "type": "string",
                            "example": "KOTA TANGERANG SELATAN"
                          },
                          "postal_code": {
                            "type": "string",
                            "example": "15414"
                          },
                          "country_code": {
                            "type": "string",
                            "default": "IDN"
                          }
                        }
                      }
                    }
                  },
                  "item_details": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "8647400b88aca0ce58a52a58b0efc638"
                        },
                        "name": {
                          "type": "string",
                          "example": "Baby Stroller"
                        },
                        "price": {
                          "type": "number",
                          "example": 2400000
                        },
                        "quantity": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    }
                  },
                  "payment_type": {
                    "type": "string",
                    "enum": [
                      "credit_card",
                      "bank_transfer",
                      "gopay",
                      "shopeepay"
                    ],
                    "description": "Preferred payment method",
                    "example": "bank_transfer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "Midtrans snap token"
                        },
                        "redirect_url": {
                          "type": "string",
                          "description": "Payment page URL"
                        },
                        "order_id": {
                          "type": "string"
                        },
                        "gross_amount": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/midtrans/notification": {
      "post": {
        "summary": "Handle Midtrans payment notification with signature verification",
        "tags": [
          "Midtrans"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transaction_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-11-15 18:45:13"
                  },
                  "transaction_status": {
                    "type": "string",
                    "enum": [
                      "capture",
                      "settlement",
                      "pending",
                      "deny",
                      "cancel",
                      "expire",
                      "failure"
                    ],
                    "example": "settlement"
                  },
                  "transaction_id": {
                    "type": "string",
                    "example": "513f1f01-c9da-474c-9fc9-d5c64364b709"
                  },
                  "status_message": {
                    "type": "string",
                    "example": "midtrans payment notification"
                  },
                  "status_code": {
                    "type": "string",
                    "example": "200"
                  },
                  "signature_key": {
                    "type": "string",
                    "description": "SHA512 hash for verification",
                    "example": "225b3489980d496ca7312da836629af28576031a6901ed64c8cc93a1a14877c866121986b20c2a3b8967ac09a820e9d7b035711918a7cae718d73643fc41bb53"
                  },
                  "settlement_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-11-15 22:45:13"
                  },
                  "payment_type": {
                    "type": "string",
                    "example": "gopay"
                  },
                  "order_id": {
                    "type": "string",
                    "example": "payment_notif_test_G589882883_93bc9bdd-b8cf-4bc2-96fa-a5d73654f6f2"
                  },
                  "merchant_id": {
                    "type": "string",
                    "example": "G589882883"
                  },
                  "gross_amount": {
                    "type": "string",
                    "example": "105000.00"
                  },
                  "fraud_status": {
                    "type": "string",
                    "enum": [
                      "accept",
                      "challenge",
                      "deny"
                    ],
                    "example": "accept"
                  },
                  "currency": {
                    "type": "string",
                    "example": "IDR"
                  }
                },
                "required": [
                  "transaction_time",
                  "transaction_status",
                  "transaction_id",
                  "order_id",
                  "merchant_id",
                  "gross_amount",
                  "signature_key"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification processed successfully"
          },
          "400": {
            "description": "Invalid notification or signature verification failed"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/midtrans/status/{transaction_id}": {
      "get": {
        "summary": "Check transaction status",
        "tags": [
          "Midtrans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction status retrieved successfully"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/midtrans/cancel/{transaction_id}": {
      "post": {
        "summary": "Cancel transaction",
        "tags": [
          "Midtrans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction cancelled successfully"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/orders": {
      "post": {
        "summary": "Create a new order with Midtrans payment",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "total_price",
                  "payment_method",
                  "payment_method_channel",
                  "shipping_name",
                  "shipping_code",
                  "shipping_service",
                  "shipping_cost",
                  "shipping_etd",
                  "shipping_weight",
                  "receiver_name",
                  "receiver_phone",
                  "receiver_address",
                  "receiver_subdistrict_id",
                  "receiver_subdistrict_name",
                  "receiver_city_id",
                  "receiver_city_name",
                  "receiver_state_id",
                  "receiver_state_name",
                  "receiver_zip_code",
                  "items"
                ],
                "properties": {
                  "total_price": {
                    "type": "number",
                    "description": "Total price before discount",
                    "example": 2889000
                  },
                  "coupon_code": {
                    "type": "array",
                    "description": "Optional array of coupon codes",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "DISCOUNT5",
                      "FREEONGKIR"
                    ]
                  },
                  "payment_method": {
                    "type": "string",
                    "enum": [
                      "VA",
                      "EWALLET",
                      "QRIS",
                      "CC"
                    ],
                    "example": "VA"
                  },
                  "payment_method_channel": {
                    "type": "string",
                    "example": "BCA"
                  },
                  "shipping_name": {
                    "type": "string",
                    "example": "SiCepat Express"
                  },
                  "shipping_code": {
                    "type": "string",
                    "example": "sicepat"
                  },
                  "shipping_service": {
                    "type": "string",
                    "example": "GOKIL"
                  },
                  "shipping_description": {
                    "type": "string",
                    "example": "Cargo Per Kg (Minimal 10kg)"
                  },
                  "shipping_cost": {
                    "type": "number",
                    "example": 38500
                  },
                  "shipping_etd": {
                    "type": "string",
                    "example": "2-3 day"
                  },
                  "shipping_weight": {
                    "type": "number",
                    "example": 10500
                  },
                  "receiver_name": {
                    "type": "string",
                    "example": "Budi Santoso"
                  },
                  "receiver_phone": {
                    "type": "string",
                    "example": "08123456789"
                  },
                  "receiver_address": {
                    "type": "string",
                    "example": "Jl. Merdeka No.123"
                  },
                  "receiver_address_detail": {
                    "type": "string",
                    "example": "RT 03 / RW 05, dekat warung bu Sari"
                  },
                  "receiver_subdistrict_id": {
                    "type": "string",
                    "example": "3603281001"
                  },
                  "receiver_subdistrict_name": {
                    "type": "string",
                    "example": "KELAPA DUA"
                  },
                  "receiver_district_id": {
                    "type": "string",
                    "example": "360328"
                  },
                  "receiver_district_name": {
                    "type": "string",
                    "example": "KELAPA DUA"
                  },
                  "receiver_city_id": {
                    "type": "string",
                    "example": "3603"
                  },
                  "receiver_city_name": {
                    "type": "string",
                    "example": "KABUPATEN TANGERANG"
                  },
                  "receiver_state_id": {
                    "type": "string",
                    "example": "36"
                  },
                  "receiver_state_name": {
                    "type": "string",
                    "example": "BANTEN"
                  },
                  "receiver_zip_code": {
                    "type": "string",
                    "example": "15831"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "product_id": {
                          "type": "string",
                          "description": "Encrypted product ID",
                          "example": "8647400b88aca0ce58a52a58b0efc638"
                        },
                        "quantity": {
                          "type": "integer",
                          "example": 1
                        },
                        "price": {
                          "type": "number",
                          "example": 2160000
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully with payment details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Order created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Encrypted order ID"
                            },
                            "invoice_number": {
                              "type": "string"
                            },
                            "total_price": {
                              "type": "number"
                            },
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "payment": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string",
                              "description": "Midtrans snap token"
                            },
                            "redirect_url": {
                              "type": "string",
                              "description": "Payment page URL"
                            },
                            "transaction_id": {
                              "type": "string"
                            }
                          }
                        },
                        "coupons_applied": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "discount_amount": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors"
          },
          "404": {
            "description": "Product not found or coupon invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "summary": "Get all orders with filtering and pagination",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter orders from this date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter orders until this date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by order status (pending, processing, shipped, delivered, cancelled)"
          },
          {
            "in": "query",
            "name": "payment_status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by payment status (pending, paid, failed, refunded)"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by encrypted user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Orders retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "orders": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "current_page": {
                              "type": "integer"
                            },
                            "last_page": {
                              "type": "integer"
                            },
                            "from": {
                              "type": "integer"
                            },
                            "to": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User doesn't have admin access"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/orders/me": {
      "get": {
        "summary": "Get all orders for the authenticated user",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of orders per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "cancelled"
              ]
            },
            "description": "Filter orders by status",
            "example": "processing"
          },
          {
            "in": "query",
            "name": "payment_status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "paid",
                "failed"
              ]
            },
            "description": "Filter orders by payment status",
            "example": "paid"
          }
        ],
        "responses": {
          "200": {
            "description": "User orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Orders retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "orders": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Encrypted order ID",
                                "example": "encrypted_order_id"
                              },
                              "user_id": {
                                "type": "string",
                                "description": "Encrypted user ID",
                                "example": "encrypted_user_id"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "pending",
                                  "processing",
                                  "shipped",
                                  "delivered",
                                  "cancelled"
                                ],
                                "example": "processing"
                              },
                              "order_date": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-11-15T10:30:00Z"
                              },
                              "total_price": {
                                "type": "number",
                                "example": 150000
                              },
                              "shipping_cost": {
                                "type": "number",
                                "example": 15000
                              },
                              "grand_total": {
                                "type": "number",
                                "example": 165000
                              },
                              "discount_amount": {
                                "type": "number",
                                "example": 5000
                              },
                              "coupon_codes": {
                                "type": "string",
                                "description": "JSON string of applied coupon codes",
                                "example": "[\"DISCOUNT5\", \"FREEONGKIR\"]"
                              },
                              "shipping_name": {
                                "type": "string",
                                "example": "SiCepat Express"
                              },
                              "shipping_service": {
                                "type": "string",
                                "example": "GOKIL"
                              },
                              "shipping_etd": {
                                "type": "string",
                                "example": "2-3 day"
                              },
                              "receiver_name": {
                                "type": "string",
                                "example": "Budi Santoso"
                              },
                              "receiver_phone": {
                                "type": "string",
                                "example": "08123456789"
                              },
                              "receiver_address": {
                                "type": "string",
                                "example": "Jl. Merdeka No.123"
                              },
                              "receiver_city_name": {
                                "type": "string",
                                "example": "KABUPATEN TANGERANG"
                              },
                              "receiver_state_name": {
                                "type": "string",
                                "example": "BANTEN"
                              },
                              "receiver_zip_code": {
                                "type": "string",
                                "example": "15831"
                              },
                              "payment_method": {
                                "type": "string",
                                "example": "VA"
                              },
                              "payment_method_channel": {
                                "type": "string",
                                "example": "BCA"
                              },
                              "payment_status": {
                                "type": "string",
                                "enum": [
                                  "pending",
                                  "paid",
                                  "failed"
                                ],
                                "example": "paid"
                              },
                              "payment_transaction_id": {
                                "type": "string",
                                "example": "TXN-123456789"
                              },
                              "tracking_number": {
                                "type": "string",
                                "example": "SICEPAT123456789"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-11-15T10:30:00Z"
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "integer",
                                      "example": 1
                                    },
                                    "order_id": {
                                      "type": "integer",
                                      "example": 123
                                    },
                                    "product_id": {
                                      "type": "string",
                                      "description": "Encrypted product ID",
                                      "example": "encrypted_product_id"
                                    },
                                    "quantity": {
                                      "type": "integer",
                                      "example": 2
                                    },
                                    "price": {
                                      "type": "number",
                                      "example": 75000
                                    },
                                    "subtotal": {
                                      "type": "number",
                                      "example": 150000
                                    },
                                    "created_at": {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2023-11-15T10:30:00Z"
                                    },
                                    "updated_at": {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2023-11-15T10:30:00Z"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer",
                              "example": 1
                            },
                            "per_page": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 25
                            },
                            "total_pages": {
                              "type": "integer",
                              "example": 3
                            },
                            "has_next": {
                              "type": "boolean",
                              "example": true
                            },
                            "has_prev": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No orders found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No orders found"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders/details/{order_id}": {
      "get": {
        "summary": "Get order details for a specific order",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "order_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted order ID",
            "example": "encrypted_order_id_string"
          },
          {
            "in": "query",
            "name": "include_product_info",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include product information in response",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Order details retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "order_id": {
                          "type": "string",
                          "description": "Encrypted order ID",
                          "example": "encrypted_order_id"
                        },
                        "order_details": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "order_id": {
                                "type": "string",
                                "description": "Encrypted order ID",
                                "example": "encrypted_order_id"
                              },
                              "product_id": {
                                "type": "string",
                                "description": "Encrypted product ID",
                                "example": "encrypted_product_id"
                              },
                              "quantity": {
                                "type": "integer",
                                "example": 2
                              },
                              "price": {
                                "type": "number",
                                "format": "decimal",
                                "example": 75000
                              },
                              "subtotal": {
                                "type": "number",
                                "format": "decimal",
                                "example": 150000
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-11-15T10:30:00Z"
                              },
                              "product_info": {
                                "type": "object",
                                "description": "Only included when include_product_info=true",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "Encrypted product ID"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "iPhone 14 Pro"
                                  },
                                  "description": {
                                    "type": "string",
                                    "example": "Latest iPhone with advanced features"
                                  },
                                  "image_url": {
                                    "type": "string",
                                    "example": "https://example.com/images/iphone14pro.jpg"
                                  },
                                  "category": {
                                    "type": "string",
                                    "example": "Electronics"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "total_items": {
                              "type": "integer",
                              "example": 3
                            },
                            "total_quantity": {
                              "type": "integer",
                              "example": 5
                            },
                            "total_amount": {
                              "type": "number",
                              "example": 375000
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid order ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid order ID format"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Order does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Access denied - Order does not belong to you"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found or no details found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Order not found or no details available"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/order-details": {
      "get": {
        "summary": "Get all order details with pagination (Admin only)",
        "tags": [
          "Admin",
          "Orders"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page",
            "example": 20
          },
          {
            "in": "query",
            "name": "order_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by specific encrypted order ID",
            "example": "encrypted_order_id"
          },
          {
            "in": "query",
            "name": "product_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by specific encrypted product ID",
            "example": "encrypted_product_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Admin access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/orders/status/{order_id}": {
      "put": {
        "summary": "Update order status, tracking number, or payment status",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "order_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted ID of the order to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "processing",
                      "shipped",
                      "delivered",
                      "cancelled"
                    ],
                    "description": "New order status"
                  },
                  "payment_status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "paid",
                      "failed",
                      "refunded",
                      "cancelled"
                    ],
                    "description": "New payment status"
                  },
                  "tracking_number": {
                    "type": "string",
                    "description": "Shipping tracking number"
                  },
                  "payment_cancel_reason": {
                    "type": "string",
                    "description": "Reason for payment cancellation (required when status or payment_status is cancelled)"
                  }
                },
                "example": {
                  "status": "shipped",
                  "tracking_number": "TRACK123456789"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Order status updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or request"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User doesn't have admin access"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/orders/payment-status": {
      "post": {
        "summary": "Query payment status",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transaction_id": {
                    "type": "string",
                    "example": "TXN-123456789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders/cancel-payment": {
      "post": {
        "summary": "Cancel a payment",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transaction_id": {
                    "type": "string",
                    "example": "TXN-123456789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment canceled successfully"
          },
          "400": {
            "description": "Invalid transaction ID or cancellation failed"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/product-images": {
      "post": {
        "summary": "Upload product images",
        "tags": [
          "ProductImages"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "product_id": {
                    "type": "integer"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "main",
                      "thumbnail",
                      "gallery",
                      "zoom"
                    ]
                  },
                  "is_main": {
                    "type": "boolean"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Images uploaded and processed successfully"
          }
        }
      }
    },
    "/api/product-images/{productId}": {
      "get": {
        "summary": "Get images by product ID",
        "tags": [
          "ProductImages"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of product images"
          }
        }
      }
    },
    "/api/product-images/{id}": {
      "delete": {
        "summary": "Soft delete product image",
        "tags": [
          "ProductImages"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image soft deleted"
          }
        }
      },
      "put": {
        "summary": "Update a product image",
        "tags": [
          "ProductImages"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the product image to update"
          },
          {
            "in": "formData",
            "name": "category",
            "type": "string",
            "enum": [
              "main",
              "thumbnail",
              "gallery",
              "zoom"
            ],
            "description": "The category of the image"
          },
          {
            "in": "formData",
            "name": "is_main",
            "type": "boolean",
            "description": "Whether this image is the main image"
          },
          {
            "in": "formData",
            "name": "images",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Product image not found"
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "Get all products with optional filtering and pagination",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of products per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by encrypted category ID"
          },
          {
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            },
            "description": "Keyword to search in product name or description"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "popular",
                "newest",
                "price_asc",
                "price_desc"
              ],
              "default": "newest"
            },
            "description": "Sort products by criteria popular (highest rating), newest (created_at), price_asc (low to high), price_desc (high to low)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of products with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Products retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "current_page": {
                              "type": "integer"
                            },
                            "last_page": {
                              "type": "integer"
                            },
                            "from": {
                              "type": "integer"
                            },
                            "to": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "tags": [
          "Products"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Product created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "$ref": "#/components/schemas/Product"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/hot": {
      "get": {
        "summary": "Get all hot products with optional filtering and pagination",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of products per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by encrypted category ID"
          },
          {
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            },
            "description": "Keyword to search in product name or description"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "popular",
                "newest",
                "price_asc",
                "price_desc"
              ],
              "default": "newest"
            },
            "description": "Sort products by criteria"
          }
        ],
        "responses": {
          "200": {
            "description": "List of hot products with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Hot products retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "current_page": {
                              "type": "integer"
                            },
                            "last_page": {
                              "type": "integer"
                            },
                            "from": {
                              "type": "integer"
                            },
                            "to": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/new": {
      "get": {
        "summary": "Get all new products with optional filtering and pagination",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of products per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by encrypted category ID"
          },
          {
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            },
            "description": "Keyword to search in product name or description"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "popular",
                "newest",
                "price_asc",
                "price_desc"
              ],
              "default": "newest"
            },
            "description": "Sort products by criteria"
          }
        ],
        "responses": {
          "200": {
            "description": "List of new products with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "New products retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "current_page": {
                              "type": "integer"
                            },
                            "last_page": {
                              "type": "integer"
                            },
                            "from": {
                              "type": "integer"
                            },
                            "to": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/id/{id}": {
      "get": {
        "summary": "Get product by ID with images",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Product retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "$ref": "#/components/schemas/Product"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid product ID format"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/products/slug/{slug}": {
      "get": {
        "summary": "Get product by Slug with images",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Product retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "$ref": "#/components/schemas/Product"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/products/{id}": {
      "put": {
        "summary": "Update a product by ID",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Product updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "$ref": "#/components/schemas/Product"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Soft delete a product by ID",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product soft-deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Product soft-deleted successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stores": {
      "post": {
        "summary": "Create a new product store",
        "tags": [
          "Product Store"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "area",
                  "kode_toko"
                ],
                "properties": {
                  "area": {
                    "type": "string"
                  },
                  "kode_toko": {
                    "type": "string"
                  },
                  "alamat": {
                    "type": "string"
                  },
                  "nomor_hp": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "link_map": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Store created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStore"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all product stores",
        "tags": [
          "Product Store"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of stores",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ProductStoreList"
                }
              }
            }
          }
        }
      }
    },
    "/api/stores/{id}": {
      "get": {
        "summary": "Get a store by ID",
        "tags": [
          "Product Store"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted store ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Store found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStore"
                }
              }
            }
          },
          "404": {
            "description": "Store not found"
          }
        }
      },
      "put": {
        "summary": "Update a store by ID",
        "tags": [
          "Product Store"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted store ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "area": {
                    "type": "string"
                  },
                  "alamat": {
                    "type": "string"
                  },
                  "nomor_hp": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "link_map": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Store updated successfully"
          },
          "404": {
            "description": "Store not found"
          }
        }
      },
      "delete": {
        "summary": "Soft delete a store by setting active to false",
        "tags": [
          "Product Store"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted store ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Store soft deleted"
          },
          "404": {
            "description": "Store not found"
          }
        }
      }
    },
    "/api/rajaongkir/area/provinsi": {
      "get": {
        "summary": "Get all provinces from local database",
        "tags": [
          "RajaOngkir"
        ],
        "responses": {
          "200": {
            "description": "Provinces retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Province"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No provinces found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/rajaongkir/area/kabupaten/{id_provinsi}": {
      "get": {
        "summary": "Get all kabupaten by province ID from local database",
        "tags": [
          "RajaOngkir"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id_provinsi",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Province ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Kabupaten retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Kabupaten"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid id_provinsi",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No kabupaten found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/rajaongkir/area/kecamatan/{id_kabupaten}": {
      "get": {
        "summary": "Get all kecamatan by kabupaten ID from local database",
        "tags": [
          "RajaOngkir"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id_kabupaten",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Kabupaten ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Kecamatan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Kecamatan"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid id_provinsi",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No kecamatan found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/rajaongkir/area/kelurahan/{id_kecamatan}": {
      "get": {
        "summary": "Get all kelurahan by kelurahan ID from local database",
        "tags": [
          "RajaOngkir"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id_kecamatan",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Kelurahan ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Kelurahan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Kelurahan"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid id_provinsi",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No kelurahan found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/rajaongkir/calculate/domestic-cost": {
      "post": {
        "summary": "Menghitung ongkos kirim domestik berdasarkan nama kota/kabupaten",
        "tags": [
          "RajaOngkir"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "origin",
                  "destination",
                  "weight"
                ],
                "properties": {
                  "origin": {
                    "type": "string",
                    "example": "Jakarta",
                    "description": "Nama kota/kabupaten asal"
                  },
                  "destination": {
                    "type": "string",
                    "example": "Bandung",
                    "description": "Nama kota/kabupaten tujuan"
                  },
                  "weight": {
                    "type": "integer",
                    "example": 1000,
                    "description": "Berat paket dalam gram"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Berhasil menghitung ongkos kirim",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "description": "Data ongkos kirim"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Kota asal atau tujuan tidak ditemukan"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/total-revenue": {
      "get": {
        "summary": "Get total revenue OR Web Orders in Rupiah",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Total revenue fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/total-orders": {
      "get": {
        "summary": "Get total number of orders OR Web Orders",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Total orders fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/this-month-orders": {
      "get": {
        "summary": "Get total number of orders for current month OR This Month Order",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "This month orders fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/average-order-value": {
      "get": {
        "summary": "Get average order value",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Average order value fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/revenue-per-day": {
      "get": {
        "summary": "Get revenue per day",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Revenue per day fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/new-customers": {
      "get": {
        "summary": "Get number of new customers in last 30 days",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "New customers fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/active-customers": {
      "get": {
        "summary": "Get number of active customers",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Active customers fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/product-sales": {
      "get": {
        "summary": "Get product sales data",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Product sales fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/low-stock-products": {
      "get": {
        "summary": "Get products with low stock",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Low stock products fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/out-of-stock-products": {
      "get": {
        "summary": "Get out of stock products",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Out of stock products fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/top-selling-products": {
      "get": {
        "summary": "Get top 10 selling products OR Popular product by total order",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Top selling products fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/popular-products-by-cart": {
      "get": {
        "summary": "Get popular products by cart count",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of products to return",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Popular products by cart fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/popular-products-by-reviews": {
      "get": {
        "summary": "Get popular products by review count",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of products to return",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Popular products by reviews fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/coupon-usage": {
      "get": {
        "summary": "Get coupon usage count",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Coupon usage fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/voucher-usage": {
      "get": {
        "summary": "Get voucher usage count",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Voucher usage fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/shipping-usage": {
      "get": {
        "summary": "Get shipping service usage data",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Shipping usage fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/average-delivery-time": {
      "get": {
        "summary": "Get average delivery time in hours",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Average delivery time fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/delivery-status": {
      "get": {
        "summary": "Get delivery status breakdown",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Delivery status fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/top-articles": {
      "get": {
        "summary": "Get top 5 most viewed articles",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Top articles fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/blog-views": {
      "get": {
        "summary": "Get total blog views",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Blog views fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reports/engagement-rate": {
      "get": {
        "summary": "Get blog engagement rate",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "Engagement rate fetched successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reviews": {
      "post": {
        "summary": "Create a new product review using product slug",
        "tags": [
          "Reviews"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "slug",
                  "rating"
                ],
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "produk-keren"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 4
                  },
                  "review": {
                    "type": "string",
                    "example": "Produk sangat bagus dan cepat sampai."
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get paginated reviews by authenticated user (optionally filtered by product slug)",
        "tags": [
          "Reviews"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of paginated reviews"
          }
        }
      }
    },
    "/api/reviews/slug/{slug}": {
      "get": {
        "summary": "Get paginated reviews by authenticated user (optionally filtered by product slug)",
        "tags": [
          "Reviews"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "description": "Product slug to filter reviews by product"
          }
        ],
        "responses": {
          "200": {
            "description": "List of paginated reviews"
          }
        }
      }
    },
    "/api/reviews/{slug}": {
      "delete": {
        "summary": "Soft delete a review by product slug",
        "tags": [
          "Reviews"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted"
          },
          "404": {
            "description": "Review or product not found or unauthorized"
          }
        }
      }
    },
    "/api/settings/general": {
      "get": {
        "summary": "Get general settings",
        "tags": [
          "Settings - General"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "General settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "General settings retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/GeneralSettings"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update general settings",
        "tags": [
          "Settings - General"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "General settings updated successfully"
          }
        }
      }
    },
    "/api/settings/carousels": {
      "get": {
        "summary": "Get all carousels",
        "tags": [
          "Settings - Carousel"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Carousels retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create new carousel",
        "tags": [
          "Settings - Carousel"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "title_sub": {
                    "type": "string"
                  },
                  "button_1_title": {
                    "type": "string"
                  },
                  "button_1_link": {
                    "type": "string"
                  },
                  "button_2_title": {
                    "type": "string"
                  },
                  "button_2_link": {
                    "type": "string"
                  },
                  "images": {
                    "type": "string"
                  },
                  "sort_order": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Carousel created successfully"
          }
        }
      }
    },
    "/api/settings/carousels/{id}": {
      "put": {
        "summary": "Update carousel",
        "tags": [
          "Settings - Carousel"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted carousel ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Carousel updated successfully"
          }
        }
      },
      "delete": {
        "summary": "Delete carousel (soft delete)",
        "tags": [
          "Settings - Carousel"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted carousel ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Carousel deleted successfully"
          }
        }
      }
    },
    "/api/settings/available-payments": {
      "get": {
        "summary": "Get all available payments",
        "tags": [
          "Settings - Available Payments"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Available payments retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create new available payment",
        "tags": [
          "Settings - Available Payments"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "sort_order": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Available payment created successfully"
          }
        }
      }
    },
    "/api/settings/available-payments/{id}": {
      "put": {
        "summary": "Update available payment",
        "tags": [
          "Settings - Available Payments"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted payment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Available payment updated successfully"
          }
        }
      },
      "delete": {
        "summary": "Delete available payment (soft delete)",
        "tags": [
          "Settings - Available Payments"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted payment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Available payment deleted successfully"
          }
        }
      }
    },
    "/api/settings/our-services": {
      "get": {
        "summary": "Get all our services",
        "tags": [
          "Settings - Our Services"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Our services retrieved successfully"
          }
        }
      }
    },
    "/api/settings/our-services/{id}": {
      "put": {
        "summary": "Update our service",
        "tags": [
          "Settings - Our Services"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted service ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "icon": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "modals": {
                    "type": "object"
                  },
                  "sort_order": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Our service updated successfully"
          }
        }
      }
    },
    "/api/settings/contact-us": {
      "get": {
        "summary": "Get all contact us messages",
        "tags": [
          "Settings - Contact Us"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Contact us messages retrieved successfully"
          }
        }
      }
    },
    "/api/contact-us": {
      "post": {
        "summary": "Create new contact us message (public endpoint)",
        "tags": [
          "Settings - Contact Us"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "subject",
                  "message"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 150,
                    "example": "john@example.com"
                  },
                  "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "08123456789"
                  },
                  "subject": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Inquiry about products"
                  },
                  "message": {
                    "type": "string",
                    "example": "I would like to know more about your products"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact us message created successfully"
          }
        }
      }
    },
    "/api/settings/contact-us/{id}": {
      "put": {
        "summary": "Update contact us message",
        "tags": [
          "Settings - Contact Us"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted contact ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact us message updated successfully"
          }
        }
      },
      "delete": {
        "summary": "Delete contact us (soft delete)",
        "tags": [
          "Settings - Contact Us"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted payment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Us deleted successfully"
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "email",
                  "password",
                  "full_name"
                ],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "dob": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "province_id": {
                    "type": "string"
                  },
                  "province_name": {
                    "type": "string"
                  },
                  "city_id": {
                    "type": "string"
                  },
                  "city_name": {
                    "type": "string"
                  },
                  "subdistrict_id": {
                    "type": "string"
                  },
                  "subdistrict_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Email already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "summary": "Login a user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@domain.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "admin1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "summary": "Logout a user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "summary": "Get user profile",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "delete": {
        "summary": "Soft delete a user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User soft-deleted successfully"
          },
          "404": {
            "description": "User not found or already deleted"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/send-verification": {
      "post": {
        "summary": "Send verification email if not verified",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent"
          },
          "400": {
            "description": "Email already verified"
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/verify-email/{token}": {
      "get": {
        "summary": "Verify email using token",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/users/forgot-password": {
      "post": {
        "summary": "Request password reset email",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully"
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/reset-password/{token}": {
      "post": {
        "summary": "Reset user password using token",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully updated"
          },
          "400": {
            "description": "Invalid or expired token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users with pagination, filtering, sorting, and search (Admin only)",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "role",
                "gender"
              ]
            },
            "description": "Sort by field",
            "example": "role"
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order",
            "example": "desc"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Filter by email",
            "example": "john@example.com"
          },
          {
            "in": "query",
            "name": "phone_no",
            "schema": {
              "type": "string"
            },
            "description": "Filter by phone number",
            "example": "+1234567890"
          },
          {
            "in": "query",
            "name": "date_from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at from date (YYYY-MM-DD)",
            "example": "2023-01-01"
          },
          {
            "in": "query",
            "name": "date_to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at to date (YYYY-MM-DD)",
            "example": "2023-12-31"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search across all fields (username, email, full_name, phone, address)",
            "example": "john"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "current_page": {
                              "type": "integer"
                            },
                            "per_page": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "total_pages": {
                              "type": "integer"
                            },
                            "has_next": {
                              "type": "boolean"
                            },
                            "has_prev": {
                              "type": "boolean"
                            }
                          }
                        },
                        "filters": {
                          "type": "object",
                          "description": "Applied filters"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/vouchers": {
      "post": {
        "summary": "Create a new voucher",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "discount",
                  "valid_from",
                  "valid_until"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "discount": {
                    "type": "number"
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date"
                  },
                  "valid_until": {
                    "type": "string",
                    "format": "date"
                  },
                  "user_id": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all available vouchers",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of vouchers"
          }
        }
      }
    },
    "/api/vouchers/me": {
      "get": {
        "summary": "Get available vouchers member",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of vouchers"
          }
        }
      }
    },
    "/api/vouchers-publish": {
      "get": {
        "summary": "Get all available vouchers",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of vouchers"
          }
        }
      }
    },
    "/api/vouchers/{id}": {
      "delete": {
        "summary": "Soft delete a voucher",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher deleted"
          }
        }
      },
      "put": {
        "summary": "Update a voucher",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "discount": {
                    "type": "number"
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date"
                  },
                  "valid_until": {
                    "type": "string",
                    "format": "date"
                  },
                  "user_id": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/vouchers/code/{code}": {
      "get": {
        "summary": "Get voucher by code",
        "tags": [
          "Vouchers"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher found"
          }
        }
      }
    },
    "/api/voucher/validate": {
      "get": {
        "summary": "Validasi voucher berdasarkan kode dan (opsional) user ID",
        "tags": [
          "Voucher"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Kode voucher"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "required": false,
            "description": "ID user (jika voucher bersifat personal)"
          }
        ],
        "responses": {
          "200": {
            "description": "Validasi voucher berhasil",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "example": true
                    },
                    "voucher": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "code": {
                          "type": "string",
                          "example": "VOUCHER50K"
                        },
                        "discount_amount": {
                          "type": "number",
                          "format": "float",
                          "example": 50000
                        },
                        "min_purchase": {
                          "type": "number",
                          "format": "float",
                          "example": 100000
                        },
                        "valid_from": {
                          "type": "string",
                          "format": "date",
                          "example": "2025-04-01"
                        },
                        "valid_until": {
                          "type": "string",
                          "format": "date",
                          "example": "2025-04-30"
                        },
                        "user_id": {
                          "type": "integer",
                          "nullable": true,
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Voucher tidak valid atau tidak ditemukan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Voucher tidak ditemukan, sudah digunakan, atau tidak berlaku untuk user ini"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Terjadi kesalahan internal saat validasi",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Terjadi kesalahan saat memvalidasi voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/warranty": {
      "get": {
        "summary": "Get all warranty data with pagination, filtering, sorting, and search (Admin only)",
        "tags": [
          "Warranty"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order for created_at",
            "example": "desc"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "submitted",
                "under_review",
                "approved",
                "rejected",
                "completed"
              ]
            },
            "description": "Filter by status",
            "example": "submitted"
          },
          {
            "in": "query",
            "name": "date_from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at from date (YYYY-MM-DD)",
            "example": "2023-01-01"
          },
          {
            "in": "query",
            "name": "date_to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter created_at to date (YYYY-MM-DD)",
            "example": "2023-12-31"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search across all fields",
            "example": "john"
          }
        ],
        "responses": {
          "200": {
            "description": "Warranties retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warranty_Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/warranty/{id}": {
      "get": {
        "summary": "Get warranty by ID (Admin only)",
        "tags": [
          "Warranty"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted warranty ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Warranty retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Warranty retrieved successfully"
                    }
                  },
                  "$ref": "#/components/schemas/Warranty_Tables"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Warranty not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete warranty (soft delete)",
        "tags": [
          "Warranty"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted warranty ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Warranty deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Warranty deleted successfully"
                    },
                    "data": {
                      "type": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Warranty not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/warranty/{id}/status": {
      "put": {
        "summary": "Update warranty status",
        "tags": [
          "Warranty"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Encrypted warranty ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "submitted",
                      "under_review",
                      "approved",
                      "rejected",
                      "completed"
                    ],
                    "example": "under_review"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Warranty status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Warranty status updated successfully"
                    },
                    "$ref": "#/components/schemas/Warranty_Tables"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid status"
          },
          "404": {
            "description": "Warranty not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/wishlist": {
      "post": {
        "summary": "Tambahkan produk ke wishlist pengguna",
        "tags": [
          "Wishlist"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "example": 2
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Ambil daftar wishlist semua pengguna",
        "tags": [
          "Wishlist"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/api/wishlist/me": {
      "get": {
        "summary": "Ambil daftar wishlist pengguna yang masih aktif",
        "tags": [
          "Wishlist"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/api/wishlist/{id}": {
      "delete": {
        "summary": "Hapus wishlist (soft delete)",
        "tags": [
          "Wishlist"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID wishlist"
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "BlogPosts",
      "description": "Manajemen artikel/blog post"
    },
    {
      "name": "Cart",
      "description": "Shopping cart operations"
    },
    {
      "name": "Categories",
      "description": "Category management"
    },
    {
      "name": "GeneralSettings",
      "description": "Manage general settings of the platform"
    },
    {
      "name": "Little Dimple",
      "description": "Manage Little dimple of the platform"
    },
    {
      "name": "Orders",
      "description": "Order transactions"
    },
    {
      "name": "ProductImages",
      "description": "Product image management"
    },
    {
      "name": "Users",
      "description": "User management"
    },
    {
      "name": "Vouchers",
      "description": "Voucher management"
    }
  ]
}